mean_est <-  est$fitted
desv_est <- sqrt(sum(est$residuals^2)/length(est$residuals))
data <- data.frame(dnorm(y, mean = mean, sd = desv, log = TRUE),
dnorm(y, mean = mean_est, sd = desv_est, log = TRUE))
names(data) <- c("Real", "Simulado")
data <- gather(data, key = "Tipo", value = "Probabilidad", 2:4)
data
data <- gather(data = data, key = "Tipo", value = "Probabilidad")
data
# Convergencia en probabilidad de beta de regresión lineal####
simulation <- function(n){
sigma <- 3.5
beta_0 <- 2.5
beta <- -16.4
desv <- 3.6
x <- runif(n)
u <- rnorm(n, sd = desv)
mean <- beta_0 + x*beta
y <- mean + u
est <- lm(y ~ x)
mean_est <-  est$fitted
desv_est <- sqrt(sum(est$residuals^2)/length(est$residuals))
data <- data.frame(dnorm(y, mean = mean, sd = desv, log = TRUE),
dnorm(y, mean = mean_est, sd = desv_est, log = TRUE))
names(data) <- c("Real", "Simulado")
data <- gather(data = data, key = "Tipo", value = "Probabilidad")
graph <-  ggplot(data) + geom_density(aes(Probabilidad, fill = Tipo)) +
ylab("f(Y)") + ggtitle("Convergencia uniforme en probabilidad")
p <- ggplotly(graph)
return(p)
}
simulation(100)
# Convergencia en probabilidad de beta de regresión lineal####
simulation <- function(n){
sigma <- 3.5
beta_0 <- 2.5
beta <- -16.4
desv <- 3.6
x <- runif(n)
u <- rnorm(n, sd = desv)
mean <- beta_0 + x*beta
y <- mean + u
est <- lm(y ~ x)
mean_est <-  est$fitted
desv_est <- sqrt(sum(est$residuals^2)/length(est$residuals))
data <- data.frame(dnorm(y, mean = mean, sd = desv, log = TRUE),
dnorm(y, mean = mean_est, sd = desv_est, log = TRUE))
names(data) <- c("Real", "Simulado")
data <- gather(data = data, key = "Tipo", value = "Probabilidad")
graph <-  ggplot(data) + geom_density(aes(Probabilidad, fill = Tipo), alpha = 0.5) +
ylab("f(Y)") + ggtitle("Convergencia uniforme en probabilidad")
p <- ggplotly(graph)
return(p)
}
simulation(100)
simulation(10)
simulation(100)
simulation(1000)
# Convergencia uniforme en probabilidad de beta de regresión lineal####
simulation <- function(n){
sigma <- 3.5
beta_0 <- 2.5
beta <- -16.4
desv <- 3.6
x <- runif(n)
u <- rnorm(n, sd = desv)
mean <- beta_0 + x*beta
y <- mean + u
est <- lm(y ~ x)
mean_est <-  est$fitted
desv_est <- sqrt(sum(est$residuals^2)/length(est$residuals))
data <- data.frame(dnorm(y, mean = mean, sd = desv, log = TRUE),
dnorm(y, mean = mean_est, sd = desv_est, log = TRUE))
names(data) <- c("Real", "Simulado")
data <- gather(data = data, key = "Tipo", value = "Probabilidad")
graph <-  ggplot(data) + geom_density(aes(Probabilidad, fill = Tipo), alpha = 0.5) +
ylab("Log-verosimilitud") + ggtitle("Convergencia uniforme en probabilidad")
p <- ggplotly(graph)
return(p)
}
simulation(1000)
# Convergencia uniforme en probabilidad####
simulation <- function(n){
sigma <- 3.5
beta_0 <- 2.5
beta <- -16.4
desv <- 3.6
x <- runif(n)
u <- rnorm(n, sd = desv)
mean <- beta_0 + x*beta
y <- mean + u
est <- lm(y ~ x)
mean_est <-  est$fitted
desv_est <- sqrt(sum(est$residuals^2)/length(est$residuals))
data <- data.frame(dnorm(y, mean = mean, sd = desv, log = TRUE),
dnorm(y, mean = mean_est, sd = desv_est, log = TRUE))
names(data) <- c("Real", "Simulado")
data <- gather(data = data, key = "Tipo", value = "Probabilidad")
graph <-  ggplot(data) + geom_density(aes(Probabilidad, fill = Tipo), alpha = 0.5) +
ylab("Log-verosimilitud") + ggtitle("Convergencia uniforme en probabilidad")
p <- ggplotly(graph)
return(p)
}
simulation(500)
simulation(50)
rm(list = ls())
n = 60
x <- runif(n)
u <- rnorm(n, sd = 1.5)
y = 2 + 16*x + u
est <- lm(y~x)
est$coefficients
rm(list = ls())
n = 60
x <- runif(n)
u <- rnorm(n, sd = 1.5)
y = 2 + 16*x + u
est <- lm(y~x)
est$coefficients
est$coefficients[2]
simulacion <- function(n){
x <- runif(n)
u <- rnorm(n, sd = 1.5)
y = 2 + 16*x + u
est <- lm(y~x)
return(est$coefficients[2])
}
simulacion(10)
simulacion(100)
simulacion <- function(n){
x <- runif(n)
u <- rnorm(n, sd = 500)
y = 2 + 16*x + u
est <- lm(y~x)
return(est$coefficients[2])
}
a <- sapply(3:100, function(x) simulacion(x))
plot(a)
d <- data.frame(a, 3:100)
names(d) <- c("y", "x")
ggplot(d, aes(y = y, x = x)) + geom_line()
a <- sapply(3:10000, function(x) simulacion(x))
d <- data.frame(a, 3:10000)
ggplot(d, aes(y = y, x = x)) + geom_line()
d
head(d)
dim(d)
ggplot(d, aes(y = y, x = x)) + geom_line()
names(d) <- c("y", "x")
ggplot(d, aes(y = y, x = x)) + geom_line()
# Convergence in probability (sliding hump argument) ####
n <- 100
partition <- 0
j <- 0
h <- 1
vect <- 16
for(i in 1:n){
if(h + 1 > length(partition)){
h <- 1
j <- j + 1
partition <- seq(0, 1, by = 1/j)
}
min <- partition[h]
max <- partition[h + 1]
sample <- runif(1, min = 0, max = 1)
sim <-  16 + ifelse((sample >= min) & (sample < max), 1, 0)
h <- h + 1
vect <- rbind(vect, sim)
}
data <- data.frame(vect, 0:n)
names(data) <- c("y", "x")
graph <-  ggplot(data, aes(x = x, y = y)) + geom_line() +  xlab("Obs.") + ylab("beta") + ggtitle("Beta estimado")
ggplotly(graph)
# Convergencia casi segura ####
simulation <- function(n){
const <- 16
var <- rnorm(1, 38, 548)
serie <- const + var/n
return(serie)
}
vect <- 0
for (i in 3:500){
sim <- simulation(i)
vect <- rbind(vect, sim)
}
data <- data.frame(vect, 2:500)
names(data) <- c("y", "x")
graph <-  ggplot(data, aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = 16, color = 'blue') +
xlab("Obs.") + ylab("beta") + ggtitle("Beta estimado")
ggplotly(graph)
# Convergencia uniforme en probabilidad####
simulation <- function(n){
sigma <- 3.5
beta_0 <- 2.5
beta <- -16.4
desv <- 3.6
x <- runif(n)
u <- rnorm(n, sd = desv)
mean <- beta_0 + x*beta
y <- mean + u
est <- lm(y ~ x)
mean_est <-  est$fitted
desv_est <- sqrt(sum(est$residuals^2)/length(est$residuals))
data <- data.frame(dnorm(y, mean = mean, sd = desv, log = TRUE),
dnorm(y, mean = mean_est, sd = desv_est, log = TRUE))
names(data) <- c("Real", "Simulado")
data <- gather(data = data, key = "Tipo", value = "Probabilidad")
graph <-  ggplot(data) + geom_density(aes(Probabilidad, fill = Tipo), alpha = 0.5) +
ylab("Log-verosimilitud") + ggtitle("Convergencia uniforme en probabilidad")
p <- ggplotly(graph)
return(p)
}
simulation(50)
simulation(80)
simulation(800)
simulation(10)
simulation(10)
simulation(10)
simulation(100)
simulation(300)
simulation(350)
setwd("C:/Users/david/Desktop/proyectos/job-education-mismatch/data"
)
stata <- read.csv("stata.csv")
names(stata)
summary(stata$mismatch)
library("dplyr")
library("tidyr")
table(stata$MUNICIPIO_D)
table(stata$MUNICIPIO_O)
stata %>% groupby(SIT_O)  %>% summarise(mismatch = mean(mismatch))
stata %>% groupby(SIT_O)  %>% summarise(mismatch = mean(mismatch))
stata %>% group_by(SIT_O)  %>% summarise(mismatch = mean(mismatch))
stata %>% group_by(SIT_O)  %>% summarise(mismatch = mean(mismatch, na.rm = TRUE))
stata %>% group_by(SIT_O)  %>%
summarise(mismatch = mean(mismatch, na.rm = TRUE)) %>%
mean
stata%>% group_by(SIT_O)  %>%
summarise(mismatch = mean(mismatch, na.rm = TRUE)) %>%
ungroup() %>% mean
stata%>% group_by(SIT_O)  %>%
summarise(mismatch = mean(mismatch, na.rm = TRUE)) %>%
ungroup()
stata%>% group_by(SIT_O)  %>%
summarise(mismatch = mean(mismatch, na.rm = TRUE)) %>%
ungroup() %>% apply(2, mean)
stata%>% group_by(SIT_O)  %>%
summarise(mismatch = mean(mismatch, na.rm = TRUE)) %>%
ungroup() %>% apply(2, mean, na.rm = TRUE)
library("Hmisc")
install.packages("Hmisc")
library("Hmisc")
?Hmisc::wtd.mean()
stata%>% group_by(SIT_O)  %>%
summarise(mismatch = mean(mismatch, fex)) %>%
ungroup() %>% apply(2, mean, na.rm = TRUE)
stata%>% group_by(SIT_O)  %>%
summarise(mismatch = wtd.mean(mismatch, fex)) %>%
ungroup() %>% apply(2, mean, na.rm = TRUE)
stata%>% group_by(SIT_O)  %>%
summarise(mismatch = wtd.mean(mismatch, fex)) %>%
ungroup() %>% summarise(mismatch = mean(mismatch))
stata%>% group_by(SIT_O)  %>%
summarise(mismatch = wtd.mean(mismatch, fex)) %>%
ungroup() %>% summarise(mismatch = mean(mismatch, na.rm = TRUE))
stata%>% group_by(SIT_O)  %>%
summarise(mismatch = wtd.mean(mismatch, fex)) %>%
ungroup() %>%
summarise(mean = mean(mismatch, na.rm = TRUE),
quant1 = quantile(mismatch, 0, na.rm = TRUE),
quant1 = quantile(mismatch, 0.25, na.rm = TRUE),
quant1 = quantile(mismatch, 0.5, na.rm = TRUE),
quant1 = quantile(mismatch, 0.75, na.rm = TRUE),
quant1 = quantile(mismatch, 1, na.rm = TRUE))
stata%>% group_by(SIT_O)  %>%
summarise(mismatch = wtd.mean(mismatch, fex)) %>%
ungroup() %>%
summarise(mean = mean(mismatch, na.rm = TRUE),
quant0 = quantile(mismatch, 0, na.rm = TRUE),
quant1 = quantile(mismatch, 0.25, na.rm = TRUE),
quant2 = quantile(mismatch, 0.5, na.rm = TRUE),
quant3 = quantile(mismatch, 0.75, na.rm = TRUE),
quant4 = quantile(mismatch, 1, na.rm = TRUE))
stata%>% group_by(SIT_O)  %>%
summarise(var = wtd.mean("mismatch", fex)) %>%
ungroup() %>%
summarise(mean = mean(var, na.rm = TRUE),
quant0 = quantile(var, 0, na.rm = TRUE),
quant1 = quantile(var, 0.25, na.rm = TRUE),
quant2 = quantile(var, 0.5, na.rm = TRUE),
quant3 = quantile(var, 0.75, na.rm = TRUE),
quant4 = quantile(var, 1, na.rm = TRUE))
stata%>% group_by(SIT_O)  %>%
summarise(var = wtd.mean(mismatch, fex)) %>%
ungroup() %>%
summarise(mean = mean(var, na.rm = TRUE),
quant0 = quantile(var, 0, na.rm = TRUE),
quant1 = quantile(var, 0.25, na.rm = TRUE),
quant2 = quantile(var, 0.5, na.rm = TRUE),
quant3 = quantile(var, 0.75, na.rm = TRUE),
quant4 = quantile(var, 1, na.rm = TRUE))
stata%>% group_by(SIT_O)  %>%
summarise(var = wtd.mean(stata["mismatch"], fex)) %>%
ungroup() %>%
summarise(mean = mean(var, na.rm = TRUE),
quant0 = quantile(var, 0, na.rm = TRUE),
quant1 = quantile(var, 0.25, na.rm = TRUE),
quant2 = quantile(var, 0.5, na.rm = TRUE),
quant3 = quantile(var, 0.75, na.rm = TRUE),
quant4 = quantile(var, 1, na.rm = TRUE))
eval(parse('stata'))
eval(parse("stata"))
eval("stata")
get(eval("stata"))
stata%>% group_by(SIT_O)  %>%
summarise(var = wtd.mean(get(eval("mismatch")), fex)) %>%
ungroup() %>%
summarise(mean = mean(var, na.rm = TRUE),
quant0 = quantile(var, 0, na.rm = TRUE),
quant1 = quantile(var, 0.25, na.rm = TRUE),
quant2 = quantile(var, 0.5, na.rm = TRUE),
quant3 = quantile(var, 0.75, na.rm = TRUE),
quant4 = quantile(var, 1, na.rm = TRUE))
desc_stat_group <- function(x) stata%>% group_by(SIT_O)  %>%
summarise(var = wtd.mean(get(eval(x)), fex)) %>%
ungroup() %>%
summarise(mean = mean(var, na.rm = TRUE),
quant0 = quantile(var, 0, na.rm = TRUE),
quant1 = quantile(var, 0.25, na.rm = TRUE),
quant2 = quantile(var, 0.5, na.rm = TRUE),
quant3 = quantile(var, 0.75, na.rm = TRUE),
quant4 = quantile(var, 1, na.rm = TRUE))
desc_stat_group("mismatch")
desc_stat_group("accesiblidad")
desc_stat_group("accesiblidad_privada_nivel")
desc_stat_group("mismatch")
desc_stat_group("accesiblidad_privada_nivel")
desc_stat_group("accesiblidad_nivel")
desc_stat_group("mismatch")
desc_stat_group("accesiblidad_nivel")
desc_stat_group("accesiblidad_privada_nivel")
stata <- read.csv("datos_para_agrupar.csv")
desc_stat_group <- function(x) stata%>% group_by(SIT_O)  %>%
summarise(var = wtd.mean(get(eval(x)), fex)) %>%
ungroup() %>%
summarise(mean = mean(var, na.rm = TRUE),
quant0 = quantile(var, 0, na.rm = TRUE),
quant1 = quantile(var, 0.25, na.rm = TRUE),
quant2 = quantile(var, 0.5, na.rm = TRUE),
quant3 = quantile(var, 0.75, na.rm = TRUE),
quant4 = quantile(var, 1, na.rm = TRUE))
desc_stat_group("mismatch")
desc_stat_group <- function(x) stata%>% group_by(sit_o)  %>%
summarise(var = wtd.mean(get(eval(x)), fex)) %>%
ungroup() %>%
summarise(mean = mean(var, na.rm = TRUE),
quant0 = quantile(var, 0, na.rm = TRUE),
quant1 = quantile(var, 0.25, na.rm = TRUE),
quant2 = quantile(var, 0.5, na.rm = TRUE),
quant3 = quantile(var, 0.75, na.rm = TRUE),
quant4 = quantile(var, 1, na.rm = TRUE))
desc_stat_group("mismatch")
desc_stat_group("accesiblidad_nivel")
desc_stat_group("accesiblidad_privada_nivel")
desc_stat_group("accesiblidad")
desc_stat_group("acc")
wtd.mean(stata$acc, stata$fex)
wtd.mean(stata$accesiblidad_nivel, stata$fex)
wtd.mean(stata$accesiblidad_privada_nivel, stata$fex)
setwd("C:/Users/david/Desktop/proyectos/job-education-mismatch/data")
library("dplyr")
library("tidyr")
library("Hmisc")
stata <- read.csv("datos_para_agrupar.csv")
names(stata)
desc_stat_group <- function(x) stata%>% group_by(sit_o)  %>%
summarise(var = wtd.mean(get(eval(x)), fex)) %>%
ungroup() %>%
summarise(mean = mean(var, na.rm = TRUE),
quant0 = quantile(var, 0, na.rm = TRUE),
quant1 = quantile(var, 0.25, na.rm = TRUE),
quant2 = quantile(var, 0.5, na.rm = TRUE),
quant3 = quantile(var, 0.75, na.rm = TRUE),
quant4 = quantile(var, 1, na.rm = TRUE))
desc_stat_group("mismatch")
desc_stat_group("accesiblidad_nivel")
desc_stat_group("accesiblidad_privada_nivel")
desc_stat_group("accesiblidad")
desc_stat_group("acc")
sum(stata$fex)
wtd.mean(stata$acc, stata$fex)
desc_stat_group("mismatch")
desc_stat_group("accesiblidad_nivel")
desc_stat_group("accesiblidad_privada_nivel")
desc_stat_group("accesiblidad")
desc_stat_group("acc")
mean_group <- function(x) stata%>% group_by(sit_o)  %>%
summarise(var = wtd.mean(get(eval(x)), fex)) %>%
ungroup() %>%
summarise(mean = mean(var, na.rm = TRUE),
quant0 = quantile(var, 0, na.rm = TRUE),
quant1 = quantile(var, 0.25, na.rm = TRUE),
quant2 = quantile(var, 0.5, na.rm = TRUE),
quant3 = quantile(var, 0.75, na.rm = TRUE),
quant4 = quantile(var, 1, na.rm = TRUE))
sum_group <- function(x) stata%>% group_by(sit_o)  %>%
summarise(var = sum(get(eval(x))*fex)) %>%
ungroup() %>%
summarise(mean = mean(var, na.rm = TRUE),
quant0 = quantile(var, 0, na.rm = TRUE),
quant1 = quantile(var, 0.25, na.rm = TRUE),
quant2 = quantile(var, 0.5, na.rm = TRUE),
quant3 = quantile(var, 0.75, na.rm = TRUE),
quant4 = quantile(var, 1, na.rm = TRUE))
mean_group("mismatch")
mean_group("accesiblidad_nivel")
mean_group("accesiblidad_privada_nivel")
mean_group("accesiblidad")
mean_group("acc")
sum_group <- function(x) stata%>% group_by(sit_o)  %>%
summarise(var = sum(get(eval(x))*fex)) %>%
ungroup() %>%
summarise(mean = mean(var, na.rm = TRUE),
quant0 = quantile(var, 0, na.rm = TRUE),
quant1 = quantile(var, 0.25, na.rm = TRUE),
quant2 = quantile(var, 0.5, na.rm = TRUE),
quant3 = quantile(var, 0.75, na.rm = TRUE),
quant4 = quantile(var, 1, na.rm = TRUE))
sum_group("empleado")
mean(sum(stata$empleado*stata$fex))
sum(!duplicated(stata$sit_o))
mean(sum(stata$empleado*stata$fex))/296
sum_group("carro0")
sum_group("carro0")
sum_group("carro1")
sum_group("carro2")
table(stata$educ)
sum_group("overeduc")
sum_group("undereduc")
wtd.mean(stata$undereduc, stata$fex)
wtd.mean(stata$overeduc, stata$fex)
sum(stata$overeduc*stata$fex)
sum(stata$overeduc*stata$fex, na.rm = TRUE)
sum(stata$undereduc*stata$fex, na.rm = TRUE)
sum_group("overeduc")
sum_group("undereduc")
# Teorema del límite central
n <- 500
x <- runif(n)
u <- rnorm(n, sd = 126)
y <- 3 + 16*x + u
ls(y ~ x)$coefficients
ls(y ~ x)$coeff
ls(y ~ x)
lm(y ~ x)$coefficients
clt <- function(n){
x <- runif(n)
u <- rnorm(n, sd = 126)
y <- 3 + 16*x + u
return(16 - lm(y ~ x)$coefficients[2])
}
hist(sapply(1:500, function(x) t(x)))
t(1)
t(3)
hist(sapply(1:500, function(x) clt(x)))
hist(sapply(1:500, function(x) sqrt(x)*clt(x)))
hist(sapply(1:500, function(x) (x)^0.2*clt(x)))
hist(sapply(1:500, function(x) (x)^0.4*clt(x)))
hist(sapply(1:500, function(x) (x)^0.3*clt(x)))
hist(sapply(1:50, function(x) (x)^0.3*clt(x)))
hist(sapply(1:5000, function(x) (x)^0.3*clt(x)))
hist(sapply(1:5000, function(x) (x)^0.4*clt(x)))
# Teorema del límite central
clt <- function(n){
x <- runif(n)
u <- rnorm(n, sd = 126)
y <- 3 + 16*x + u
return(16 - lm(y ~ x)$coefficients[2])
}
hist(sapply(1:500, function(x) sqrt(x)*clt(x)))
hist(sapply(1:500, function(x) clt(x)))
hist(sapply(1:500, function(x) sqrt(x)*clt(x)))
# Teorema del límite central
clt <- function(n){
x <- runif(n)
u <- rnorm(n, sd = 126)
y <- 3 + 16*x + u
return(16 - lm(y ~ x)$coefficients[2])
}
hist(sapply(1:500, function(x) sqrt(x)*clt(x)))
hist(sapply(1:500, function(x) sqrt(x)*clt(x)))
hist(sapply(1:500, function(x) sqrt(x)*clt(x)))
hist(sapply(1:500, function(x) sqrt(x)*clt(x)))
hist(sapply(1:500, function(x) sqrt(x)*clt(x)))
hist(sapply(1:500, function(x) sqrt(x)*clt(x)))
hist(sapply(1:500, function(x) sqrt(x)*clt(x)))
hist(sapply(1:500, function(x) clt(x)))
hist(sapply(1:500, function(x) clt(x)))
hist(sapply(1:500, function(x) clt(x)))
hist(sapply(1:500, function(x) clt(x)))
hist(sapply(1:500, function(x) clt(x)))
hist(sapply(1:500, function(x) clt(x)))
hist(sapply(1:500, function(x) clt(x)))
hist(sapply(1:500, function(x) clt(x)))
hist(sapply(1:1000, function(x) sqrt(x)*clt(x)))
hist(sapply(1:1000, function(x) sqrt(x)*clt(x)))
hist(sapply(1:1000, function(x) sqrt(x)*clt(x)))
hist(sapply(1:1000, function(x) sqrt(x)*clt(x)))
hist(sapply(1:1000, function(x) sqrt(x)*clt(x)))
hist(sapply(1:1000, function(x) sqrt(x)*clt(x)))
hist(sapply(1:1000, function(x) sqrt(x)*clt(x)))
hist(sapply(1:1000, function(x) sqrt(x)*clt(x)))
